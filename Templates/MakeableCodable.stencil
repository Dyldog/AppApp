
extension CodableMakeableView: Codable {
    enum CodingKeys: String, CodingKey {
        case type
        case value
    }

    init(from decoder: Decoder) throws {
        let valueContainer = try decoder.container(keyedBy: CodingKeys.self)
        
        self.type = try valueContainer.decode(String.self, forKey: .type)
        
        switch type {
{% for type in types.implementing.MakeableView|!protocol %}
{% if type|!annotated:"skipCodable" %}
        case typeString({{ type.name }}.self):
            self.value = try valueContainer.decode({{ type.name }}.self, forKey: .value)
{% endif %}
{% endfor %}
        default:
            fatalError(type)
        }
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(type, forKey: .type)
        
        switch self.value {
{% for type in types.implementing.MakeableView|!protocol %}
{% if type|!annotated:"skipCodable" %}
        case let value as {{ type.name }}:
            try container.encode(value, forKey: .value)
{% endif %}
{% endfor %}
        default: fatalError()
        }
    }
}
